<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PokeDrop Master - Ultimate Pok√©mon Center Drop Hunter</title>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap" rel="stylesheet">
  <style>
    /* Wild Pok√©mon Theme: Sky gradients, floating elements, evolutions */
    body {
      font-family: 'Nunito', sans-serif;
      background: linear-gradient(135deg, #87CEEB 0%, #98D8E8 25%, #90EE90 50%, #ADD8E6 75%, #FFB6C1 100%);
      background-size: 400% 400%;
      animation: skyShift 20s ease infinite;
      position: relative;
      overflow-x: hidden;
      min-height: 100vh;
    }
    @keyframes skyShift { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } }
    .poke-sky { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; }
    .floating-poke { position: absolute; opacity: 0.7; animation: float 6s ease-in-out infinite; }
    .pikachu { top: 10%; left: 5%; width: 80px; animation-delay: 0s; }
    .umbreon { top: 20%; right: 5%; width: 100px; animation-delay: 2s; }
    .snorlax { bottom: 10%; left: 10%; width: 120px; animation: snore 4s ease-in-out infinite; }
    @keyframes float { 0%, 100% { transform: translateY(0px) rotate(0deg); } 50% { transform: translateY(-20px) rotate(10deg); } }
    @keyframes snore { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }
    .pokeball-float { position: absolute; width: 30px; height: 30px; background: url('https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png') no-repeat; background-size: contain; opacity: 0.5; animation: spin 3s linear infinite; z-index: 1; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    .main-card {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 25px;
      padding: 2rem;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      max-width: 400px;
      margin: 2rem auto;
      position: relative;
      z-index: 10;
      border: 2px solid #FF6B6B;
      animation: evolveIn 1s ease-out;
    }
    @keyframes evolveIn { 0% { transform: scale(0.5); opacity: 0; } 100% { transform: scale(1); opacity: 1; } }
    .status-pokedex { background: linear-gradient(145deg, #FF9A56, #FF6B6B); color: white; padding: 1rem; border-radius: 15px; margin: 1rem 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.3); }
    button { background: linear-gradient(145deg, #4ECDC4, #44A08D); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 50px; font-weight: bold; cursor: pointer; transition: all 0.3s; box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
    button:hover { transform: translateY(-3px) scale(1.05); box-shadow: 0 8px 25px rgba(0,0,0,0.3); }
    button:disabled { background: #CCC; transform: none; }
    input, select { border: 2px solid #4ECDC4; border-radius: 10px; padding: 0.5rem; width: 100%; margin: 0.5rem 0; }
    input[type="range"]::-webkit-slider-thumb { background: #FF6B6B; border-radius: 50%; }
    .alert-zap { animation: zap 0.5s ease; }
    @keyframes zap { 0%, 100% { border-color: #FFD700; box-shadow: 0 0 20px #FFD700; } 50% { border-color: #FF6B6B; box-shadow: 0 0 30px #FF6B6B; } }
    .hidden { display: none; }
    /* Responsive */
    @media (max-width: 480px) { .main-card { margin: 1rem; padding: 1rem; } .floating-poke { width: 50px; } }
  </style>
</head>
<body>
  <div class="poke-sky">
    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png" class="floating-poke pikachu" alt="Pikachu">
    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/197.png" class="floating-poke umbreon" alt="Umbreon">
    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/143.png" class="floating-poke snorlax" alt="Snorlax">
    <div class="pokeball-float" style="top: 30%; left: 80%;"></div>
    <div class="pokeball-float" style="top: 60%; right: 20%; animation-delay: 1s;"></div>
  </div>

  <div class="main-card">
    <h1 style="text-align: center; color: #FF6B6B; font-size: 1.8rem; margin-bottom: 1rem;">üåÄ PokeDrop Master</h1>
    <p style="text-align: center; color: #666; margin-bottom: 1rem;">Hunt drops like a pro trainer! Monitors new releases, queues, & auto-joins lines.</p>

    <!-- Discord Setup -->
    <label>Discord Webhook URL (for alerts):</label>
    <input type="url" id="discordWebhook" placeholder="https://discord.com/api/webhooks/..." value="">
    <button onclick="testDiscord()">Test Discord Ping</button>

    <!-- Emails (Fallback, Local Only) -->
    <label>Emails (mailto fallback):</label>
    <input type="email" id="emailInput" placeholder="your@email.com">
    <button onclick="addEmail()">Add Email</button>
    <div id="emailsList"></div>

    <!-- Options -->
    <label>Check every: <span id="freqVal">5</span> mins</label>
    <input type="range" id="freqSlider" min="1" max="30" value="5">
    <label>Alert after: <span id="threshVal">2</span> fails</label>
    <input type="range" id="threshSlider" min="1" max="5" value="2">
    <label>Specific Product URL (optional):</label>
    <input type="url" id="specificUrl" placeholder="https://www.pokemoncenter.com/product/...">

    <!-- Status Pok√©dex -->
    <div id="status" class="status-pokedex">
      <p><strong>Status:</strong> <span id="statusText">Ready to evolve!</span></p>
      <p>Last Check: <span id="lastCheck">Never</span></p>
      <p>Runtime: <span id="runtime">0m 0s</span></p>
      <p>Consec Fails: <span id="consec">0</span></p>
      <p>New Products: <span id="newCount">0</span></p>
      <p>Details: <span id="details">Waiting for your command...</span></p>
    </div>

    <button id="startBtn" onclick="startMonitoring()">üöÄ Start Hunt</button>
    <button id="stopBtn" class="hidden" onclick="stopMonitoring()">‚èπÔ∏è Stop Hunt</button>
  </div>

  <!-- Audio for Cries -->
  <audio id="pikacry" preload="auto">
    <source src="https://pokeapi.co/api/v2/pokemon/25" type="audio/mpeg"> <!-- Fallback to beep if API fails -->
  </audio>

  <script>
    // State Vars (Cleaned - No Bloat)
    let intervalId = null, startTime = null, consecFails = 0, failThresh = 2, checkFreq = 5 * 60 * 1000;
    let emails = JSON.parse(localStorage.getItem('pokedrop_emails') || '[]');
    let lastProducts = JSON.parse(localStorage.getItem('last_products') || '[]'); // For drop detection
    let proxies = ['https://corsproxy.io/?', 'https://api.allorigins.win/get?url=', 'https://thingproxy.freeboard.io/fetch/', 'https://cors-anywhere.herokuapp.com/', 'https://api.codetabs.com/v1/proxy?quest=']; // Rotated list
    let blacklisted = new Set();
    let webhookUrl = '';

    // UI Helpers
    function updateUI(status, details = '', newProds = 0) {
      document.getElementById('statusText').textContent = status;
      document.getElementById('lastCheck').textContent = new Date().toLocaleTimeString();
      document.getElementById('consec').textContent = consecFails;
      document.getElementById('newCount').textContent = newProds;
      document.getElementById('details').textContent = details;
      if (newProds > 0 || /drop|new|accessible/i.test(status)) document.getElementById('status').classList.add('alert-zap');
      updateRuntime();
    }
    function updateRuntime() {
      if (startTime) document.getElementById('runtime').textContent = `${Math.floor((Date.now() - startTime) / 60000)}m ${Math.floor(((Date.now() - startTime) % 60000) / 1000)}s`;
    }
    setInterval(updateRuntime, 1000);

    // Email Management
    function addEmail() {
      const email = document.getElementById('emailInput').value.trim();
      if (email && /\S+@\S+\.\S+/.test(email)) {
        emails.push(email);
        localStorage.setItem('pokedrop_emails', JSON.stringify(emails));
        renderEmails();
        document.getElementById('emailInput').value = '';
      }
    }
    function renderEmails() {
      document.getElementById('emailsList').innerHTML = emails.map(e => `<div>${e} <button onclick="removeEmail('${e}')">Remove</button></div>`).join('') || '<p>No emails added.</p>';
    }
    function removeEmail(email) { emails = emails.filter(e => e !== email); localStorage.setItem('pokedrop_emails', JSON.stringify(emails)); renderEmails(); }
    renderEmails(); // Load on start

    // Discord Test/Send
    async function sendDiscord(title, desc, color = 0xFFD700) {
      webhookUrl = document.getElementById('discordWebhook').value;
      if (!webhookUrl) return;
      const embed = { title, description: desc, color, footer: { text: `PokeDrop Master | ${new Date().toLocaleString()}` } };
      try {
        await fetch(webhookUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ embeds: [embed] }) });
      } catch (e) { console.error('Discord fail:', e); }
    }
    async function testDiscord() {
      await sendDiscord('üß™ Test Ping', 'Your webhook is live! Ready for drops. ‚ö°');
      alert('Test sent! Check your Discord.');
    }

    // Fallback Email (mailto)
    function sendMailto(subject, body) {
      emails.forEach(email => window.location.href = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`);
    }

    // Play Pok√© Cry (Pikachu on alert)
    function playCry() {
      const audio = document.getElementById('pikacry');
      audio.src = 'https://raw.githubusercontent.com/PokeAPI/audio/master/cries/2021/25.mp3'; // Pikachu cry URL (fallback to beep)
      audio.play().catch(() => new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+Dyvmwh').play());
    }

    // Proxy Test/Rotate
    async function getHealthyProxy(url) {
      for (let p of proxies.filter(pr => !blacklisted.has(pr))) {
        try {
          const ctrl = new AbortController();
          setTimeout(() => ctrl.abort(), 8000);
          const res = await fetch(`${p}${encodeURIComponent(url)}`, { signal: ctrl.signal });
          if (res.ok) return p;
        } catch {}
        blacklisted.add(p); setTimeout(() => blacklisted.delete(p), 300000);
      }
      return null;
    }

    // Queue Extract (Enhanced with pos from Incapsula)
    function extractQueue(text, url) {
      const posMatch = text.match(/pos["']?\s*[:=]\s*["']?(\d+)["']?/i) || url.match(/pos=(\d+)/i);
      return posMatch ? posMatch[1] : null;
    }

    // Product Extract/Compare for Drops
    function extractProducts(text) {
      const productMatches = [...text.matchAll(/<a[^>]*href=["']([^"']*product[^"']*)["'][^>]*>([^<]+)<\/a>/gi)];
      return productMatches.map(m => ({ url: m[1], title: m[2].trim() })).slice(0, 20); // Top 20 for snapshot
    }
    function detectNewProducts(currentProds) {
      const newOnes = currentProds.filter(p => !lastProducts.some(lp => lp.title === p.title && lp.url === p.url));
      const count = newOnes.length;
      if (count > 0) {
        lastProducts = currentProds;
        localStorage.setItem('last_products', JSON.stringify(lastProducts));
      }
      return { count, new: newOnes };
    }

    // Main Check Function (Upgraded for Drops)
    async function checkSite(isConsec = false) {
      const specific = document.getElementById('specificUrl').value || '';
      const urls = specific ? [specific] : ['https://www.pokemoncenter.com/', 'https://www.pokemoncenter.com/category/new-releases', 'https://www.pokemoncenter.com/category/trading-card-game'];
      let success = false, queuePos = null, products = [], details = '';

      for (let url of urls) {
        const proxy = await getHealthyProxy(url);
        if (!proxy) continue;
        try {
          let res = await fetch(`${proxy}${encodeURIComponent(url)}`);
          if (res.ok) {
            let text = proxy.includes('allorigins') ? (await res.json()).contents : await res.text();
            const finalUrl = decodeURIComponent(res.url.replace(proxy, ''));
            queuePos = extractQueue(finalUrl, text);
            if (queuePos || /queue-it\.net/i.test(finalUrl) || /waiting room/i.test(text)) {
              details = `Queue detected! Pos: ${queuePos || 'Unknown'}. Joining line...`;
              if (!isConsec) window.location.href = 'https://www.pokemoncenter.com/'; // Auto-redirect!
              success = false;
              break;
            } else if (/pokemoncenter\.com/i.test(finalUrl) && text.length > 2000) { // Accessible + content
              products = extractProducts(text);
              const { count, new: newProds } = detectNewProducts(products);
              details = count > 0 ? `DROP DETECTED! ${count} new product(s): ${newProds.map(np => np.title).join(', ')}` : 'Shop open, no new drops.';
              success = true;
              if (count > 0) playCry();
              break;
            }
          }
        } catch (e) { console.error(e); }
      }

      if (!success && !queuePos) details = 'Check failed (proxies down?).';
      updateUI(success ? (products.length > 0 ? 'Drop Alert! üèÜ' : 'Shop Open üîì') : 'Queued/Closed üö´', details, detectNewProducts(products).count);
      logCheck(success ? 'Success' : 'Fail', details, queuePos);

      // Alert if drop or queue
      if (success && detectNewProducts(products).count > 0 || queuePos) {
        const alertMsg = details;
        sendDiscord('üö® PokeDrop Alert!', alertMsg);
        sendMailto('PokeDrop Alert!', alertMsg); // Fallback
      }

      return { success, queuePos, isFail: !success };
    }

    // Consecutive Verification (Keep Your Logic)
    async function verifyConsec(count = 1) {
      if (count >= failThresh) {
        const result = await checkSite(true);
        if (!result.isFail) consecFails = 0;
        else await new Promise(r => setTimeout(r, 5000)), await verifyConsec(count + 1);
      }
    }

    // Start/Stop
    async function startMonitoring() {
      if (emails.length === 0 && !document.getElementById('discordWebhook').value) return alert('Add a Discord webhook or email first!');
      consecFails = 0;
      startTime = Date.now();
      await checkSite();
      intervalId = setInterval(async () => {
        await checkSite();
        if (consecFails++ >= failThresh) await verifyConsec();
      }, checkFreq + Math.random() * 60000 - 30000); // Random ¬±30s
      document.getElementById('startBtn').classList.add('hidden');
      document.getElementById('stopBtn').classList.remove('hidden');
      updateUI('Hunting... üïµÔ∏è');
    }
    function stopMonitoring() {
      clearInterval(intervalId);
      intervalId = null;
      startTime = null;
      consecFails = 0;
      document.getElementById('startBtn').classList.remove('hidden');
      document.getElementById('stopBtn').classList.add('hidden');
      updateUI('Hunt Paused üõë');
    }

    // Sliders
    document.getElementById('freqSlider').oninput = e => { checkFreq = e.target.value * 60 * 1000; document.getElementById('freqVal').textContent = e.target.value; };
    document.getElementById('threshSlider').oninput = e => { failThresh = e.target.value; document.getElementById('threshVal').textContent = e.target.value; };

    // Logging (Simple Console for Now)
    function logCheck(status, details, queue) { console.log(`${new Date().toISOString()}: ${status} - ${details} (Queue: ${queue})`); }

    // Load Saved
    document.getElementById('freqSlider').value = localStorage.getItem('freq') || 5;
    document.getElementById('threshSlider').value = localStorage.getItem('thresh') || 2;
  </script>
</body>
</html>
